#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('FullServer:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//////////////////
playerId=0;
clients = [];
players = [];

WebSocketServer = new require('ws');
var wor= require('./world');
id = -1;

webSocketServer = new WebSocketServer.Server({
  port: 8081
});

webSocketServer.on('connection', function(ws) {


    // for (var key in clients) {
    //     if (clients[key]==ws.upgradeReq.connection.remoteAddress){
    //         console.log("такой уже был")
    //       //  ws.close();
    //     }
    // }
    id=id+1;
    console.dir(players);
    clients.push = ({ws: ws, id: id});



  console.log("новое соединение " + id);


  ws.on('message', function(message) {
    mes = JSON.parse(message);
      console.log(mes)
      switch(mes.make){
          case 'start':
              w.startWorld();
              break;

          case 'create':
                  w.buyObject(mes.type,mes.player_id,mes.coord);
              break;
          default:
              break;
      }



  });

  ws.on('close', function() {
    console.log('соединение закрыто ' + id);
    delete clients[id];
  });

});

w = new wor.World(11,16);
// w.createPlayer("Инокентий", 0);
// w.createPlayer("222222", 1);
console.log("Серевер работает 8081");

setInterval(function () {
    clients.forEach(function (client) {

    })
    for (var key in clients) {
        clients[key].send(JSON.stringify(w.getAll(key)));
    }
}, 300);